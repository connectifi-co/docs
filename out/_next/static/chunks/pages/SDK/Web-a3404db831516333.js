(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[905],{5942:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/SDK/Web",function(){return s(6525)}])},1057:function(e,n,s){"use strict";var t=s(1527);s(959);let i={logo:(0,t.jsx)("span",{children:(0,t.jsx)("img",{src:"wordmark.png",alt:"Connectifi Wordmark",width:"200"})}),project:{link:"https://docs.connectifi.co/"},chat:{link:"https://discord.com"},docsRepositoryBase:"https://github.com/connectifi-co/docs",footer:{text:""}};n.Z=i},6525:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return r.Z}});var t=s(1527),i=s(7265),a=s(4603),l=s(1057);s(6971);var o=s(313);s(8090);var r=s(5228);function c(e){let n=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre",span:"span",h2:"h2",ul:"ul",li:"li",a:"a"},(0,o.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Web SDK Installation"}),"\n",(0,t.jsx)(n.p,{children:"Our Web SDK provides a basic implementation of a Connectifi Agent for all web clients including desktop integration platforms, electronjs, and vanilla browsers. It will bind to any Connectifi interop service endpoint and expose a scoped FDC3 api abd more. By default, the Agent will generate UX for standard interop functions such as color picking and intent resolution. It can also be run headless."}),"\n",(0,t.jsx)(n.p,{children:"Install the module in your app:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"npm i @connectifi/agent-web"})}),"\n",(0,t.jsx)(n.p,{children:"Include it in your bundle."}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(n.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"import {createAgent} from '@connectifi/agent-web';"})})})}),"\n",(0,t.jsx)(n.p,{children:"To bypass bundling, you can also load the Agent from unpkg.com and use directly as a script module:"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'<script type="module" >'})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:'  import { createAgent } from "https://unpkg.com/@connectifi/agent-web/";'})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  createAgent("})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"        `https://[ME].connectifi-interop.com`,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"        `$[appName]@$[directoryName]`,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"      )"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"      .then((fdc3) => {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"          // do fdc3 things..."})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"      });"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"</script>"})})]})}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"The module exposes a single function: createAgent which returns a Promise that resolves with a standard FDC3 2.0 API (DesktopAgent) after successfully connecting to the specified interop service. The function takes 3 arguments:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"interopHost - the URL of the Connectifi service the app is targeting\nappId - the FDC3 appId for the app. Note: this must be in the format of appName@directoryName (see security model below)"}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"config - optional configuration for the Agent including the following props:"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"logger - a callback function for logging output from agent"}),"\n",(0,t.jsx)(n.li,{children:"headless - boolean flag to run the Agent in headless mode (it will just make a connection and expose the FDC3 API)"}),"\n",(0,t.jsx)(n.li,{children:"props - a collection of properties to configue the UI for the agent"}),"\n",(0,t.jsx)(n.li,{children:"logoSrc - override the logo image"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Note: If you need an FDC3 1.2 intereface, you can use the 1.3.2 version of this module."}),"\n",(0,t.jsx)(n.h2,{id:"simple-creation-example",children:"Simple creation example"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    const fdc3Session = await createAgent('https://dev.connectifi-interop.com, 'myApp@myDirectory');"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    //then use the standard FDC3 API"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    const listener = await fdc3Session.addContextListener('fdc3.instrument', handleContext);"})})]})}),"\n",(0,t.jsx)(n.p,{children:"Example using the logger"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"const logThat = (...params: any) => {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  console.log('logThat', ...params);"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  const paramString = [...params].reduce((acc, p) => {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    acc += ` ${typeof p === 'object' ? JSON.stringify(p) : p}`;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    return acc;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  });"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  const newLog = `${new Date().toISOString()} - ${paramString}`;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  setLogs((prevLogs) => [...prevLogs, newLog]);"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"};"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"const fdc3Session = await createAgent("})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  'https://dev.connectictifi-interop.com',"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  'myApp@myDirectory',"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  {logger: logThat}"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:");"})})]})}),"\n",(0,t.jsx)(n.p,{children:"//then use the standard FDC3 API...\nExample setting a custom logo"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"const fdc3Session = await createAgent("})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  'https://dev.connectictifi-interop.com',"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  'myApp@myDirectory',"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    props: {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"      logoSrc: 'https://mylogo.png',"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    },"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  }"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:");"})})]})}),"\n",(0,t.jsx)(n.p,{children:"//then use the standard FDC3 API...\nnote: If you are setting a custom logo, you'll get best results if the logo is:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"over HTTPS"}),"\n",(0,t.jsx)(n.li,{children:"square\npng format"}),"\n",(0,t.jsx)(n.li,{children:"white/light on a transparent background\nintegrating with existing FDC3 patterns\nBy scoping of the FDC3 API, the Connectifi Agent provides a superset of typical FDC3 functionality. Supporting the FDC3 global pattern used in Desktop Containers is simple to do as well."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"making a fdc3 global object"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"const fdc3Global = async () => {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  //create the agent and assign to the window"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  window.fdc3 = await createAgent("})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    'https://dev.connectifi-interop.com',"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    'myApp@myDirectory'"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  );"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  //fire the fdc3Ready event"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  document.dispatchEvent(new CustomEvent('fdc3Ready', {}));"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"};"})})]})}),"\n",(0,t.jsx)(n.p,{children:"integrating into a preload\nUsing the above code, it is simple to then package the global declaration as a preload script in any Electronjs-based project."}),"\n",(0,t.jsx)(n.p,{children:"bridging with an existing fdc3 global instance\nWhen setting the bridgeGlobal configuration flag to true, the agent will bridge with the globally declared FDC3 object in it's environment. Bridging behavior will:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"if a Connectifi system/user channel is joined or left, the bridge will join or leave the global system/user channel of the same id (if it exists)"}),"\n",(0,t.jsx)(n.li,{children:"if a context is received over the currently joined channel, the bridge will perform an fdc3.broadcast on the global with the same context"}),"\n",(0,t.jsx)(n.li,{children:"if raiseIntent or raiseIntentForContext is called on the Connectifi scope, the Agent will also get the relevant intents from the FDC3 global environment and display them in the resolver as 'local' intents.\nnote: this feature is a work in progress and the nuance of the behavior will continue to evolve along with support for bridging in different FDC3 environments."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{children:"Customizing the Agent"}),"\n",(0,t.jsx)(n.p,{children:"The Connectifi Agent can be fully customized using the configuration object passed into the constructor. The AgentConfig interface:"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"export interface AgentConfig {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  props?: FabProps;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  headless?: boolean;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  logLevel?: LogLevel;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  bridgeGlobal?: boolean;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  logger?: (...params: any) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onFDC3Ready?: (fdc3: DesktopAgent) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSessionStarted?: (directory: DirectoryProps, username?: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSessionError?: (errorMessage: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSessionAuthRequired?: (directory: DirectoryProps) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSignedIn?: (username: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSignedOut?: () => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onChannelJoined?: (channelId: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onChannelLeft?: () => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onConnected?: (initialConnect: boolean) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onDisconnected?: (nextConnect?: number) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onWorkingChanged?: (workInProgress: boolean) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  handleIntentResolution?: ("})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    message: IntentResolutionMessage,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    callback: ResolveCallback,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    closeCallback: CloseCallback,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  ) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  handleOpen?: (message: ConnectifiOpenMessage) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"props"})})]})}),"\n",(0,t.jsx)(n.p,{children:"These are UI-specific properties that configure the default ‘FAB’ UX provided by the Agent (see UI Props below)\nheadless"}),"\n",(0,t.jsx)(n.p,{children:"If set to true - no default UI is rendered by the agent.\nlogLevel\nlogging can be set to ‘debug’, ‘info’, or ‘silent’\nbridgeGlobal"}),"\n",(0,t.jsx)(n.p,{children:"Experimental feature: if set to true - the Agent will attach to the window.fdc3 object (e.g. if running in a desktop container) and join to it for intents resolution and broadcast of context."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"logger"}),"\n",(0,t.jsx)(n.li,{children:"Specify a custom function to output log statements."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ui-props",children:"UI Props"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"logoSrc?: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"position?: ValidPositions;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"loginStyle?: LoginStyles;"})})]})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"logoSrc"})," - defines a custom location for the logo shown in the FAB\nposition - 'tl', 'ml', 'bl', 'tr', 'mr', or 'br’. Positions the FAB in top, bottom, middle, and right/left/center of the screen."]}),"\n",(0,t.jsx)(n.h2,{id:"ui-callbacks",children:"UI Callbacks"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  logger?: (...params: any) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"	"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onFDC3Ready?: (fdc3: DesktopAgent) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSessionStarted?: (directory: DirectoryProps, username?: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSessionError?: (errorMessage: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSessionAuthRequired?: (directory: DirectoryProps) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSignedIn?: (username: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onSignedOut?: () => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onChannelJoined?: (channelId: string) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onChannelLeft?: () => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onConnected?: (initialConnect: boolean) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onDisconnected?: (nextConnect?: number) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  onWorkingChanged?: (workInProgress: boolean) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  handleIntentResolution?: ("})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    message: IntentResolutionMessage,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    callback: ResolveCallback,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"    closeCallback: CloseCallback,"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  ) => void;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  handleOpen?: (message: ConnectifiOpenMessage) => void;"})})]})}),"\n",(0,t.jsx)(n.h2,{id:"handleintentresolution",children:"handleIntentResolution"}),"\n",(0,t.jsx)(n.p,{children:"This is called when an ambiguous list of intent results is pushed to the app for the end user to resolve. The callback will be provided with an IntentResolutionMessage data structure, along with a call back (ResolveCallback) to call when a user has selected on an app to resolve the intent with."}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"export interface IntentResolutionMessage {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  resolutionType: ResolutionType;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  context: Context;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  data: AppIntentResult | AppIntentResult[];"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  bridgeData?: AppIntent | AppIntent[];"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,t.jsx)(n.p,{children:"The intent resolution message has the following properties:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"resolutionType - ‘intent-resolver’ or"}),"\n",(0,t.jsxs)(n.li,{children:["‘context-resolver’ depending on if the resolution is coming from a ",(0,t.jsx)(n.code,{children:"raiseIntent"})," or ",(0,t.jsx)(n.code,{children:"raiseIntentsForContext"})," call."]}),"\n",(0,t.jsx)(n.li,{children:"context - the FDC3 context object associated with the intent"}),"\n",(0,t.jsx)(n.li,{children:"data - either a single result (’intent-resolver’ type) or a list of results (’context-resolver’). See AppIntentResult below."}),"\n",(0,t.jsxs)(n.li,{children:["bridgeData - an optional set of results coming from the bridged fdc3 global context (Desktop Agent) if the bridgeGlobal property is set to true. See ",(0,t.jsx)(n.code,{children:"AppIntentResult"})," below."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"appintentresult",children:"AppIntentResult"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"export interface AppIntentResult {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  intent: IntentMetadata;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  apps: Array<ConnectifiAppMetadata>;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"export interface ConnectifiAppMetadata extends AppMetadata {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  type: IntentResultType;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  id: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  url: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  instanceTitle: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  intents: Array<ConnectifiAppIntent>;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  proximity: number;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  useragent: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  browser?: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  device?: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  os?: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  lastUpdate: number;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,t.jsx)(n.p,{children:"The AppIntentResult joins up the standard FDC3 IntentMetadata type with an Array of ConnectifiAppMetadata types. (i.e. an intent and the app results matching it). The ConnectifiAppMetadata type is an extension of the standard FDC3 AppMetadata type that provides some additional properties that be used to help the user disambiguate between applications. For example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"proximity - Starting with 0 - a number indicating the relative device and application proximity from the app that initiated the resolver. For example, if the target app is on the same device and running in the same application (e.g. Chrome) as the initiator, proximity is 0. The scoring is meant to aid sorting the list in order of apps closest to furthers from where the user is currently working."}),"\n",(0,t.jsx)(n.li,{children:"browser - indicator of browser type the app is running in"}),"\n",(0,t.jsx)(n.li,{children:"device - indicator of the device the app is running on"}),"\n",(0,t.jsx)(n.li,{children:"os - indicator of the OS the app is running on"}),"\n",(0,t.jsx)(n.li,{children:"useragent - the raw user agent string for the app\nonChannelJoined\nCalled when a channel is joined. Argument is the id of the channel joined."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"onchannelleft",children:"onChannelLeft"}),"\n",(0,t.jsx)(n.p,{children:"Called when leaveCurrentChannel is executed. I.e. the user leaves the current channel but does not join another."}),"\n",(0,t.jsx)(n.h2,{id:"handleopen",children:"handleOpen"}),"\n",(0,t.jsx)(n.p,{children:"Called after fdc3.open or an intent is resolved. In this case, the service sends a message to the client requesting it to launch a specific app. The message format is as follows:"}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"export interface ConnectifiOpenMessage {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  name?: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  url?: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"  pendingId: string;"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,t.jsx)(n.p,{children:"Where name is the name of the app in the directory, url is the url to launch (for web applications), and pendingId is a nonce that will allow the newly launched app to retrieve any expected intent/context data. Note: name and url are optional depending on the type of app being launched."}),"\n",(0,t.jsxs)(n.p,{children:["A typical ",(0,t.jsx)(n.code,{children:"handleOpen"})," looks like this:"]}),"\n",(0,t.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"const handleOpen = (message : ConnectifiOpenMessage ) => {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"     if (data.url && data.pendingId) {"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"        window.open(data.url, data.pendingId as string);"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"      }"})}),"\n",(0,t.jsx)(n.span,{className:"line",children:(0,t.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,t.jsx)(n.p,{children:"Note the convention here of using the pendingId as the name for the new window - this is a convention picked up by the Agent - which will automatically use the name of the window to retrieve pending state for the new application. Other patterns can and will be used for non-browser clients. Also note, for most browsers, the window.open call must be sufficiently proximate to a end-user click to work. So, if you are building workflows that don’t have an opportunity for the end user to click on something before an app is launched - you will need to build some mechanism into the flow for browser (presenting the user with the link, etc)."}),"\n",(0,t.jsx)(n.h2,{id:"onworkingchanged",children:"onWorkingChanged"}),"\n",(0,t.jsx)(n.p,{children:'Called when the agent starts or stops "working" or "being busy". the boolean argument is the current state.'}),"\n",(0,t.jsx)(n.h2,{id:"onsignedin",children:"onSignedIn"}),"\n",(0,t.jsx)(n.p,{children:"Called after the user has successfully signed into the directory. Will be passed the username / identifier as an argument."}),"\n",(0,t.jsx)(n.h2,{id:"onsignedout",children:"onSignedOut"}),"\n",(0,t.jsx)(n.p,{children:"Called after the user is signed out."}),"\n",(0,t.jsx)(n.h2,{id:"onconnected",children:"onConnected"}),"\n",(0,t.jsx)(n.p,{children:"Called when a socket connection is established."}),"\n",(0,t.jsx)(n.h2,{id:"ondisconnected",children:"onDisconnected"}),"\n",(0,t.jsx)(n.p,{children:"Called when the socket connection is dropped. Will be passed the auto-reconnect time (in milliseconds) as an argument."}),"\n",(0,t.jsx)(n.h2,{id:"onsessionstarted",children:"onSessionStarted"}),"\n",(0,t.jsx)(n.p,{children:"Called when the connectifi agent has established a session to the service and directory."}),"\n",(0,t.jsx)(n.h2,{id:"onsessionerror",children:"onSessionError"}),"\n",(0,t.jsx)(n.p,{children:"Called when the connectifi agent can not establish a session to the service and directory. The error message will indicate which. This is a fatal error."}),"\n",(0,t.jsx)(n.h2,{id:"onsessionauthrequired",children:"onSessionAuthRequired"}),"\n",(0,t.jsx)(n.p,{children:"Called when the user could not connect to the directory because they could not be authenticated. Passed the directory name as an argument."}),"\n",(0,t.jsx)(n.h2,{id:"onautherror",children:"onAuthError"}),"\n",(0,t.jsx)(n.p,{children:"Called when the user could not connect to the directory because they could not be authenticated. Passed the directory name as an argument."}),"\n",(0,t.jsx)(n.h2,{id:"handling-connection-state",children:"Handling Connection State"}),"\n",(0,t.jsx)(n.p,{children:"Connectifi is designed to run anywhere including mobile devices where connection drop out is a common occurrence. The Agent provides a number of tools to mitigate potential connection issues."}),"\n",(0,t.jsx)(n.h2,{id:"auto-reconnect",children:"Auto-reconnect"}),"\n",(0,t.jsx)(n.p,{children:"If a connection is dropped, the agent will automatically manage reconnecting. Toast in the default UI will also advise end users of connection state and any reconnect attempts."}),"\n",(0,t.jsx)(n.h2,{id:"connection-errors",children:"Connection Errors"}),"\n",(0,t.jsx)(n.p,{children:"With FDC3 2.0, all FDC3 APIs are async. With Connectifi, any API call where a connection is rejected with an error of type ConnectionError.NoConnectionAvailable. This error can be handled and used to trigger a notification to the user, logging, and/or queueing of critical events."}),"\n",(0,t.jsx)(n.h2,{id:"onconnect--ondisconnect-callbacks",children:"onConnect / onDisconnect callbacks"}),"\n",(0,t.jsx)(n.p,{children:"These callbacks outlined above can be used to create custom UX around connection state. NOTE: these are not provided to manage reconnect logic as the agent itself takes care of that"}),"\n",(0,t.jsx)(n.h1,{children:"Security"}),"\n",(0,t.jsx)(n.p,{children:"The agent provides full code isolation and its own secure connection back to its service endpoint. The directory an agent connects to controls the security profile of the interop. There are 3 basic security levels:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open - any app can connect to the end point - this is recommended for development only."}),"\n",(0,t.jsx)(n.li,{children:"App - an app's identity has to be validated and registered to the directory to connect."}),"\n",(0,t.jsx)(n.li,{children:"Strict - an app's identity must be valid and belong to the directory and the user must be authenticated to connect."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This model allows for robust security where counterparties engaged in interop are not vulnerable to spoofing, cross-site-scripting attacks, and data leakage from unauthorized apps gaining access to a desktop bus."}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.p,{children:"Connectifi is fully of the web, so all the same tools and methods you'd use to troubleshoot a webapp apply for the agent. The logger callback can also provide more flexibility for inspecting and diagnosing any issues on the client. Some baseline items to check if you are having issues with the agent are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Have you checked that the URL to the interop service correct?"}),"\n",(0,t.jsxs)(n.li,{children:["Do you have the correct (case-sensitive) and fully\nqualified ",(0,t.jsx)(n.code,{children:"appName@directoryName"})," identifier for the directory you are connecting to?"]}),"\n",(0,t.jsxs)(n.li,{children:["Is your app registered with the directory and does the registered origin match the origin you are connecting from? Are you using the ",(0,t.jsx)(n.a,{href:"https://fdc3.finos.org/docs/api/ref/DesktopAgent",children:"FDC3 2.0 API"})," in your app?"]}),"\n"]}),"\n",(0,t.jsx)(n.h1,{children:"Resources"}),"\n",(0,t.jsxs)(n.p,{children:["Find the Connectifi NPM Module, on ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/@connectifi/agent-web",children:"NPM"})]})]})}e=s.hmd(e),(0,i.j)({Content:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)},nextraLayout:a.ZP,hot:e.hot,pageOpts:{filePath:"pages/SDK/Web.mdx",route:"/SDK/Web",frontMatter:{},pageMap:[{kind:"Folder",name:"Actions",route:"/Actions",children:[{kind:"MdxPage",name:"Actions",route:"/Actions/Actions"},{kind:"Meta",data:{Actions:"Actions","data-api":"Data API","deep-link":"Deep Link","enhanced-deep-links":"Enhanced Deep Links"}},{kind:"MdxPage",name:"data-api",route:"/Actions/data-api"},{kind:"MdxPage",name:"deep-link",route:"/Actions/deep-link"},{kind:"MdxPage",name:"enhanced-deep-links",route:"/Actions/enhanced-deep-links"}]},{kind:"MdxPage",name:"Applications",route:"/Applications"},{kind:"MdxPage",name:"Channels",route:"/Channels"},{kind:"MdxPage",name:"Contexts",route:"/Contexts"},{kind:"MdxPage",name:"Directories",route:"/Directories"},{kind:"MdxPage",name:"FDC3",route:"/FDC3"},{kind:"MdxPage",name:"Intents",route:"/Intents"},{kind:"Folder",name:"Receptors",route:"/Receptors",children:[{kind:"MdxPage",name:"Broadcast",route:"/Receptors/Broadcast"},{kind:"MdxPage",name:"Multibroadcast",route:"/Receptors/Multibroadcast"},{kind:"MdxPage",name:"RaiseIntent",route:"/Receptors/RaiseIntent"},{kind:"MdxPage",name:"Receptors",route:"/Receptors/Receptors"},{kind:"Meta",data:{Receptors:"Receptors",Broadcast:"Broadcast",Multibroadcast:"Multi-Broadcast",RaiseIntent:"Raise Intent"}}]},{kind:"Folder",name:"SDK",route:"/SDK",children:[{kind:"MdxPage",name:"DotNet",route:"/SDK/DotNet"},{kind:"MdxPage",name:"Web",route:"/SDK/Web"},{kind:"Meta",data:{DotNet:".Net",iOS:"iOS",Web:"Web"}},{kind:"MdxPage",name:"iOS",route:"/SDK/iOS"}]},{kind:"Meta",data:{index:"Introduction",SDK:"SDK",Channels:"Channels",Applications:"Applications",Directories:"Directories",Intents:"Intents",Contexts:"Contexts",Actions:"Actions",Receptors:"Receptors",Security:"Security",FDC3:"FDC3",contact:{title:"Contact ↗",type:"page",href:"mailto:support@connectifi.co",newWindow:!0}}},{kind:"MdxPage",name:"index",route:"/"}],headings:[{depth:1,value:"Web SDK Installation",id:"web-sdk-installation"},{depth:2,value:"Usage",id:"usage"},{depth:2,value:"Simple creation example",id:"simple-creation-example"},{depth:1,value:"Customizing the Agent",id:"customizing-the-agent"},{depth:2,value:"UI Props",id:"ui-props"},{depth:2,value:"UI Callbacks",id:"ui-callbacks"},{depth:2,value:"handleIntentResolution",id:"handleintentresolution"},{depth:2,value:"AppIntentResult",id:"appintentresult"},{depth:2,value:"onChannelLeft",id:"onchannelleft"},{depth:2,value:"handleOpen",id:"handleopen"},{depth:2,value:"onWorkingChanged",id:"onworkingchanged"},{depth:2,value:"onSignedIn",id:"onsignedin"},{depth:2,value:"onSignedOut",id:"onsignedout"},{depth:2,value:"onConnected",id:"onconnected"},{depth:2,value:"onDisconnected",id:"ondisconnected"},{depth:2,value:"onSessionStarted",id:"onsessionstarted"},{depth:2,value:"onSessionError",id:"onsessionerror"},{depth:2,value:"onSessionAuthRequired",id:"onsessionauthrequired"},{depth:2,value:"onAuthError",id:"onautherror"},{depth:2,value:"Handling Connection State",id:"handling-connection-state"},{depth:2,value:"Auto-reconnect",id:"auto-reconnect"},{depth:2,value:"Connection Errors",id:"connection-errors"},{depth:2,value:"onConnect / onDisconnect callbacks",id:"onconnect--ondisconnect-callbacks"},{depth:1,value:"Security",id:"security"},{depth:2,value:"Troubleshooting",id:"troubleshooting"},{depth:1,value:"Resources",id:"resources"}],timestamp:1731437497e3,flexsearch:{codeblocks:!0},title:"Resources"},themeConfig:l.Z,pageNextRoute:"/SDK/Web",pageOptsChecksum:void 0,dynamicMetaModules:[]})}},function(e){e.O(0,[774,589,888,179],function(){return e(e.s=5942)}),_N_E=e.O()}]);